name: CD using AWS SSM

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
  workflow_run:
      workflows: ["CI with Gradle"]  # CI Pipeline이 완료된 후 트리거
      types:
        - completed

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_EC2_INSTANCE_ID: ${{ secrets.AWS_EC2_INSTANCE_ID }}

  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  deployment:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.push.base_ref }}

      # 2. Download build artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/libs

      # 3. Docker Hub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # 4. Docker 이미지 빌드 및 푸시
      - name: Docker Image Build & Push
        env:
          NAME: gcvd2024 # 계정 명
          REPO: springboot-prod # 레포 이름
        run: |
          docker build -t $REPO .
          docker tag $REPO:latest $NAME/$REPO:latest
          docker push $NAME/$REPO:latest

      # 5. AWS SSM을 통한 Run-Command 실행
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ env.AWS_DEV_INSTANCE_ID }}
          working-directory: /home/ssm-user
          command: |
            docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }}
            docker system prune -a -f
            docker run --env-file .env -e SPRING_PROFILES_ACTIVE=prod -p 8080:8080 gcvd2024/springboot-prod
